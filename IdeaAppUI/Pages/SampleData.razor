@page "/sampleData"
@inject ICategoryData CategoryData
@inject IStatusData StatusData
@inject IUserData UserData
@inject IIdeaData IdeaData

<h3>Sample Data</h3>
@if (_categoriesCreated)
{
    <h4>Categories have been created</h4>
}
else
{
    <button class="btn btn-primary" @onclick="CreateCategories">Create Categories</button>    
}
@if (_statusesCreated)
{
    <h4>Statuses have been created</h4>
}
else
{
    <button class="btn btn-primary" @onclick="CreateStatuses">Create Statuses</button>    
}

<button class="btn btn-danger" @onclick="GenerateSampleData">Generate Sample Data</button>


@code {
    private bool _categoriesCreated;
    private bool _statusesCreated;

    private async Task GenerateSampleData()
    {
        UserModel user = new()
        {
            FirstName = "Lukas",
            LastName = "Lazar",
            EmailAddress = "lukas.lazar@test.com",
            DisplayName = "Sample Lukas Lazar",
            ObjectIdentifier = "abc-123"
        };
        await UserData.CreateUser(user);

        var foundUser = await UserData.GetUserFromAuthentication("abc-123");
        var categories = await CategoryData.GetAllCategories();
        var statuses = await StatusData.GetAllStatuses();

        HashSet<string> votes = new()
        {
            "1",
            "2",
            "3"
        };

        IdeaModel idea = new()
        {
            Author = new BasicUserModel(foundUser),
            Category = categories[0],
            Idea = "First Test Idea",
            Description = "This is an idea created by the sample data generation method."
        };
        await IdeaData.CreateIdea(idea);
        
        idea = new IdeaModel
        {
            Author = new BasicUserModel(foundUser),
            Category = categories[1],
            Idea = "Second Test Idea",
            Description = "This is an idea created by the sample data generation method.",
            IdeaStatus = statuses[0],
            OwnerNotes = "This is a note for the idea."
        };
        await IdeaData.CreateIdea(idea);
        
        idea = new IdeaModel
        {
            Author = new BasicUserModel(foundUser),
            Category = categories[2],
            Idea = "Third Test Idea",
            Description = "This is an idea created by the sample data generation method.",
            IdeaStatus = statuses[1],
            OwnerNotes = "This is a note for the idea."
        };
        await IdeaData.CreateIdea(idea);
        
        idea = new IdeaModel
        {
            Author = new BasicUserModel(foundUser),
            Category = categories[3],
            Idea = "Fourth Test Idea",
            Description = "This is an idea created by the sample data generation method.",
            IdeaStatus = statuses[2],
            UserVotes = votes,
            OwnerNotes = "This is a note for the idea."
        };
        await IdeaData.CreateIdea(idea);

        votes.Add("4");
        
        idea = new IdeaModel
        {
            Author = new BasicUserModel(foundUser),
            Category = categories[3],
            Idea = "Fifth Test Idea",
            Description = "This is an idea created by the sample data generation method.",
            IdeaStatus = statuses[3],
            UserVotes = votes,
            OwnerNotes = "This is a note for the idea."
        };
        await IdeaData.CreateIdea(idea);
    }

    private async Task CreateCategories()
    {
        var categories = await CategoryData.GetAllCategories();

        if (categories?.Count > 0)
            return;

        CategoryModel cat = new()
        {
            Name = "Courses",
            Description = "Full paid courses."
        };
        await CategoryData.CreateCategory(cat);
        
        cat = new CategoryModel
        {
            Name = "Dev Questions",
            Description = "Advice on being a developer."
        };
        await CategoryData.CreateCategory(cat);
        
        cat = new CategoryModel
        {
            Name = "In-Depth Tutorial",
            Description = "A deep-dive video on how to use a topic."
        };
        await CategoryData.CreateCategory(cat);

        cat = new CategoryModel
        {
            Name = "Other",
            Description = "Not sure what category this fits in."
        };
        await CategoryData.CreateCategory(cat);

        _categoriesCreated = true;
    }

    private async Task CreateStatuses()
    {
        var statuses = await StatusData.GetAllStatuses();
        
        if(statuses?.Count > 0)
            return;

        StatusModel stat = new()
        { Name = "Completed", Description = "The idea was accepted amd the corresponding item was created." };
        await StatusData.CreateStatus(stat);
        
        stat = new StatusModel { Name = "Watching", Description = "The idea is interesting. We are watching to see how much interest there is in it." };
        await StatusData.CreateStatus(stat);
        
        stat = new StatusModel { Name = "Upcoming", Description = "The idea was accepted and it will be released soon." };
        await StatusData.CreateStatus(stat);
        
        stat = new StatusModel { Name = "Dismissed", Description = "The idea was not something that we are going to undertake." };
        await StatusData.CreateStatus(stat);

        _statusesCreated = true;
    }
}